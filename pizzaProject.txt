Front-end
    ejs(embedded js template engine) - template engine
    express-ejs-layouts - for layout support in express for ejs template engine
    sass - css pre-processor
Back-end
    nodejs + expressjs + mongoDb
Real-time communication(both at user and admin side)
    Web Sockets - sockets.io library

folder structure on express app inspired from laravel framework
package manager: npm

App/project architecture: MVC

dev dependency are those which we need only for development and not in production
dev dependency:- nodemon(for auto reload server on changes) -> installed globally on my machine 
but still install as 'npm install nodemon -D' -> to install as a dev dependency in a project

Folder Structure:-
    app folder: contains all backend logic
        config folder: it contains all app config like auth system config like login/register
        http folder: it contains request related files like controllers and middlewares
            controllers folder: it contains all controllers(main backend logic)
            middleware folder: it contains all middlewares
        models folder: it contains all models to interact with db
 
    resources: it contains all views/templates(ejs template engine files which will be compiled into html files), scss files(which will be compiled to public folder), js files(which will be compiled to public folder) 

    public folder: it contains compiled css,compiled js, img, fonts,etc...

    routes folder: it contains routes(endpoints)
        web.js: contains all web related routes
        api.js: contains all api endpoints(backend)


Laravel mix(dev dependency):- Mix makes it extremly easy to compile and minify your application's CSS and JavaScript files.
similar to webpack. it compiles all css & js code in public folder

laravel-mix guide:- https://laravel-mix.com/docs/6.0/installation
follow the above guide to setup
goto examples section to mix both js and scss files

to read webpack.mix.js config file and compile assets, run:
    npx mix
but to watch for changes automatically on our js and scss files, run:
    npx mix watch

check this guide for more: https://laravel-mix.com/docs/6.0/cli

tailwind css for fast styling
just include cdn for tailwind, don't download
goto https://tailwindcss.com/docs/installation/play-cdn
and copy script tag in head of home.ejs(html)

NOTE: we can't write custom css in tailwind css cdn. 
For that, we need to download tailwind css and install.
For simplicity, we write our own custom css by specifying manual classes and writing css rules in app.scss wherever required


Temporary data:import menus.json pizza data in mongodb
later create admin dashboard to add pizzas

store cart data in sessions(express-sessions)
install using: 
    npm install express-session
Guide: https://www.npmjs.com/package/express-session

session explanation:
    when client sends request 1st time to server, server will generate session id as key value pair. Server will either store this session id in server memory, file, redis(in-memory storage) or db.
    In production, db is used to store sessions. So that session persist.
    Then server sends it to client along with Set-cookie field in the response header.
    client will set the cookie in cookie section when seeing Set-cookie field in response header.
    then from next request onwards, client will send cookie in request headers along with request to server.
    So that server can recognize the client.
    when cookie expires, new session is generated and new cookie will be sent to client


store environment variables like secret data in .env file
for that install:
    npm install dotenv --save
Guide: https://www.npmjs.com/package/dotenv

to flash messages and render it without redirecting the request.
it allows the developers to send a message whenever a user is redirecting to a specified web-page
install using:
    npm i express-flash
Guide: https://www.npmjs.com/package/express-flash

to store sessions in mongodb(to use mongoStore to store session)
// Guide to use mongodb store with session: https://github.com/jdesboeufs/connect-mongo
install: 
    npm i connect-mongo
Guide: https://www.npmjs.com/package/connect-mongo


install axios for making requests similar to fetch() in js but very popular.
Axios is a promise-based HTTP library that lets developers make requests to either their own or a third-party server to fetch data.
install using: 
    npm install axios
Guide: https://www.npmjs.com/package/axios


NOTE: NOTY IS DEPRICATED(NO LONGER SUPPORTED) - for now use it - but find alternative soon
NOTY is a notification library that makes it easy to create alert - success - error - warning - information - confirmation messages
install using:
    npm i noty
Guide: https://www.npmjs.com/package/noty


bcrypt: A library to help you hash passwords. so that we can store hashed passwords in db for security
install bcrypt package using:
    npm i bcrypt
Guide: https://www.npmjs.com/package/bcrypt


use passport js: Passport is middleware for Node.js that makes it easy to implement authentication and authorization. A comprehensive set of strategies support authentication using a username and password, Facebook, Twitter, and more.
Guide: https://www.npmjs.com/package/passport
install using:
    npm i passport
Goto: https://www.passportjs.org/packages/
we will use passport-local strategy package(using username and password) for now
install using:
    npm install passport-local
Guide: https://www.passportjs.org/packages/passport-local/


use moment: to format date and time at order section page for each order.
A JavaScript date library for parsing, validating, manipulating, and formatting dates.
install using: 
    npm install moment --save
Guide: https://momentjs.com/